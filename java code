import java.sql.*;

public class HotelBookingSystem {
    // JDBC URL, username, and password of MySQL server
    private static final String JDBC_URL = "jdbc:mysql://localhost:3306/HBS";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "1234";

    public static void main(String[] args) {
        try (Connection conn = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD)) {
            System.out.println("Connected to the database");
            java.util.Scanner scanner = new java.util.Scanner(System.in);
            int choice;

            do {
                System.out.println("Choose an action:");
                System.out.println("1. Add a new room");
                System.out.println("2. Add a new guest");
                System.out.println("3. View all rooms");
                System.out.println("4. View all guests");
                System.out.println("5. Make a booking");
                System.out.println("6. Process payment");
                System.out.println("7. Vacate room");
                System.out.println("8. Exit");
                System.out.print("Enter your choice: ");
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        addRoom(conn, scanner);
                        break;
                    case 2:
                        addGuest(conn, scanner);
                        break;
                    case 3:
                        viewAllRooms(conn);
                        break;
                    case 4:
                        viewAllGuests(conn);
                        break;
                    case 5:
                        makeBooking(conn, scanner);
                        break;
                    case 6:
                        processPayment(conn, scanner);
                        break;
                    case 7:
                        vacateRoom(conn, scanner);
                        break;
                    case 8:
                        System.out.println("Exiting...");
                        break;
                    default:
                        System.out.println("Invalid choice");
                }
            } while (choice != 8);
        } catch (SQLException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    // Method to add a new room
    private static void addRoom(Connection conn, java.util.Scanner scanner) throws SQLException {
        System.out.print("Enter room number: ");
        int roomNumber = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter room type: ");
        String roomType = scanner.nextLine();
        System.out.print("Enter price: ");
        double price = scanner.nextDouble();
        String sql = "INSERT INTO Rooms (RoomNumber, RoomType, Price, Status) VALUES (?, ?, ?, ?)";
        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            statement.setInt(1, roomNumber);
            statement.setString(2, roomType);
            statement.setDouble(3, price);
            statement.setString(4, "Available");
            int rowsInserted = statement.executeUpdate();
            if (rowsInserted > 0) {
                System.out.println("Room added successfully");
            }
        }
    }

    // Method to add a new guest
    private static void addGuest(Connection conn, java.util.Scanner scanner) throws SQLException {
        System.out.print("Enter first name: ");
        String firstName = scanner.next();
        System.out.print("Enter last name: ");
        String lastName = scanner.next();
        scanner.nextLine(); // Consume newline
        System.out.print("Enter email: ");
        String email = scanner.nextLine();
        System.out.print("Enter phone: ");
        String phone = scanner.next();
        String sql = "INSERT INTO Guests (FirstName, LastName, Email, Phone) VALUES (?, ?, ?, ?)";
        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            statement.setString(1, firstName);
            statement.setString(2, lastName);
            statement.setString(3, email);
            statement.setString(4, phone);
            int rowsInserted = statement.executeUpdate();
            if (rowsInserted > 0) {
                System.out.println("Guest added successfully");
            }
        }
    }

    // Method to view all rooms
    private static void viewAllRooms(Connection conn) throws SQLException {
        String sql = "SELECT * FROM Rooms";
        try (Statement statement = conn.createStatement(); ResultSet resultSet = statement.executeQuery(sql)) {
            System.out.println("Rooms:");
            while (resultSet.next()) {
                System.out.println("Room Number: " + resultSet.getInt("RoomNumber") +
                                   ", Type: " + resultSet.getString("RoomType") +
                                   ", Price: " + resultSet.getDouble("Price") +
                                   ", Status: " + resultSet.getString("Status"));
            }
        }
    }

    // Method to view all guests
    private static void viewAllGuests(Connection conn) throws SQLException {
        String sql = "SELECT * FROM Guests";
        try (Statement statement = conn.createStatement(); ResultSet resultSet = statement.executeQuery(sql)) {
            System.out.println("Guests:");
            while (resultSet.next()) {
                System.out.println("Name: " + resultSet.getString("FirstName") + " " +
                                   resultSet.getString("LastName") +
                                   ", Email: " + resultSet.getString("Email") +
                                   ", Phone: " + resultSet.getString("Phone"));
            }
        }
    }

    // Method to make a booking
    private static void makeBooking(Connection conn, java.util.Scanner scanner) throws SQLException {
        System.out.print("Enter guest ID: ");
        int guestID = scanner.nextInt();
        System.out.print("Enter room number: ");
        int roomNumber = scanner.nextInt();
        System.out.print("Enter check-in date (YYYY-MM-DD): ");
        String checkInDate = scanner.next();
        System.out.print("Enter check-out date (YYYY-MM-DD): ");
        String checkOutDate = scanner.next();
        String sql = "INSERT INTO Bookings (GuestID, RoomID, CheckInDate, CheckOutDate) VALUES (?, ?, ?, ?)";
        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            statement.setInt(1, guestID);
            statement.setInt(2, roomNumber);
            statement.setDate(3, Date.valueOf(checkInDate));
            statement.setDate(4, Date.valueOf(checkOutDate));
            int rowsInserted = statement.executeUpdate();
            if (rowsInserted > 0) {
                System.out.println("Booking made successfully");
                updateRoomStatus(conn, roomNumber, "Occupied");
            }
        }
    }

    // Method to process payment
    private static void processPayment(Connection conn, java.util.Scanner scanner) throws SQLException {
        System.out.print("Enter booking ID: ");
        int bookingID = scanner.nextInt();
        System.out.print("Enter payment amount: ");
        double amount = scanner.nextDouble();
        System.out.print("Enter payment date (YYYY-MM-DD): ");
        String paymentDate = scanner.next();
        System.out.print("Enter payment method: ");
        String paymentMethod = scanner.next();
        String sql = "INSERT INTO Payments (BookingID, Amount, PaymentDate, PaymentMethod) VALUES (?, ?, ?, ?)";
        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            statement.setInt(1, bookingID);
            statement.setDouble(2, amount);
            statement.setDate(3, Date.valueOf(paymentDate));
            statement.setString(4, paymentMethod);
            int rowsInserted = statement.executeUpdate();
            if (rowsInserted > 0) {
                System.out.println("Payment processed successfully");
            }
        }
    }

    // Method to vacate a room
    private static void vacateRoom(Connection conn, java.util.Scanner scanner) throws SQLException {
        System.out.print("Enter room number: ");
        int roomNumber = scanner.nextInt();
        updateRoomStatus(conn, roomNumber, "Available");
        System.out.println("Room vacated successfully");
    }

    // Method to update room status
    private static void updateRoomStatus(Connection conn, int roomNumber, String status) throws SQLException {
        String sql = "UPDATE Rooms SET Status = ? WHERE RoomNumber = ?";
        try (PreparedStatement statement = conn.prepareStatement(sql)) {
            statement.setString(1, status);
            statement.setInt(2, roomNumber);
            statement.executeUpdate();
        }
    }
}
